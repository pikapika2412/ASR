#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import pandas as pd
import os
from datetime import datetime

class CSVToDatabase:
    def __init__(self, db_path="duytan_books.db"):
        self.db_path = db_path
        
    def create_books_table(self):

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS books (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT,
                author TEXT,
                publisher TEXT,
                publication_year INTEGER,
                pages TEXT,
                dimensions TEXT,
                registration_number TEXT,
                isbn TEXT,
                dewey_code TEXT,
                price TEXT,
                storage_location TEXT,
                language TEXT,
                document_type TEXT,
                availability TEXT,
                keywords TEXT,
                subject TEXT,
                department TEXT,
                summary TEXT,
                cover_image TEXT,
                url TEXT,
                scraped_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        print(f"‚úì ƒê√£ t·∫°o b·∫£ng books trong {self.db_path}")
    
    def csv_to_db(self, csv_path):
        """Chuy·ªÉn d·ªØ li·ªáu t·ª´ CSV sang SQLite database"""
        
        # Ki·ªÉm tra file CSV c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(csv_path):
            print(f"‚ùå File CSV kh√¥ng t·ªìn t·∫°i: {csv_path}")
            return False
        
        try:
            # ƒê·ªçc file CSV
            print(f"üìñ ƒêang ƒë·ªçc file CSV: {csv_path}")
            df = pd.read_csv(csv_path, encoding='utf-8')
            
            print(f"‚úì ƒê√£ ƒë·ªçc {len(df)} d√≤ng d·ªØ li·ªáu t·ª´ CSV")
            print(f"‚úì C√°c c·ªôt trong CSV: {list(df.columns)}")
            
            # T·∫°o b·∫£ng database
            self.create_books_table()
            
            # K·∫øt n·ªëi database
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # X√≥a d·ªØ li·ªáu c≈© n·∫øu c√≥
            cursor.execute('DELETE FROM books')
            print("‚úì ƒê√£ x√≥a d·ªØ li·ªáu c≈© trong database")
            
            # Ch√®n d·ªØ li·ªáu m·ªõi
            success_count = 0
            error_count = 0
            
            for index, row in df.iterrows():
                try:
                    # X·ª≠ l√Ω publication_year - chuy·ªÉn th√†nh integer
                    pub_year = row.get('publication_year', 0)
                    if pd.isna(pub_year) or pub_year == '':
                        pub_year = 0
                    else:
                        try:
                            pub_year = int(float(pub_year))
                        except (ValueError, TypeError):
                            pub_year = 0
                    
                    # Ch√®n d·ªØ li·ªáu
                    cursor.execute('''
                        INSERT INTO books (
                            title, author, publisher, publication_year, pages, dimensions,
                            registration_number, isbn, dewey_code, price, storage_location,
                            language, document_type, availability, keywords, subject,
                            department, summary, cover_image, url
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        str(row.get('title', '')),
                        str(row.get('author', '')),
                        str(row.get('publisher', '')),
                        pub_year,
                        str(row.get('pages', '')),
                        str(row.get('dimensions', '')),
                        str(row.get('registration_number', '')),
                        str(row.get('isbn', '')),
                        str(row.get('dewey_code', '')),
                        str(row.get('price', '')),
                        str(row.get('storage_location', '')),
                        str(row.get('language', '')),
                        str(row.get('document_type', '')),
                        str(row.get('availability', '')),
                        str(row.get('keywords', '')),
                        str(row.get('subject', '')),
                        str(row.get('department', '')),
                        str(row.get('summary', '')),
                        str(row.get('cover_image', '')),
                        str(row.get('url', ''))
                    ))
                    success_count += 1
                    
                    # Hi·ªÉn th·ªã ti·∫øn ƒë·ªô
                    if (index + 1) % 10 == 0 or index + 1 == len(df):
                        print(f"‚è≥ ƒê√£ x·ª≠ l√Ω {index + 1}/{len(df)} d√≤ng...")
                        
                except Exception as e:
                    error_count += 1
                    print(f"‚ö†Ô∏è L·ªói t·∫°i d√≤ng {index + 1}: {str(e)}")
            
            # L∆∞u thay ƒë·ªïi
            conn.commit()
            conn.close()
            
            print(f"\nüéâ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
            print(f"‚úì Th√†nh c√¥ng: {success_count} d√≤ng")
            print(f"‚ùå L·ªói: {error_count} d√≤ng")
            print(f"üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: {self.db_path}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi CSV sang DB: {str(e)}")
            return False
    
    def show_db_stats(self):
        """Hi·ªÉn th·ªã th·ªëng k√™ database"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # ƒê·∫øm t·ªïng s·ªë s√°ch
            cursor.execute('SELECT COUNT(*) FROM books')
            total_books = cursor.fetchone()[0]
            
            print(f"\nüìä Th·ªëng k√™ database:")
            print(f"   - T·ªïng s·ªë s√°ch: {total_books}")
            
            # Th·ªëng k√™ theo ng√¥n ng·ªØ
            cursor.execute('SELECT language, COUNT(*) FROM books GROUP BY language ORDER BY COUNT(*) DESC')
            languages = cursor.fetchall()
            
            print("   - Ph√¢n b·ªë ng√¥n ng·ªØ:")
            for lang, count in languages:
                print(f"     ‚Ä¢ {lang}: {count} s√°ch")
            
            # Th·ªëng k√™ theo khoa
            cursor.execute('SELECT department, COUNT(*) FROM books GROUP BY department ORDER BY COUNT(*) DESC LIMIT 5')
            departments = cursor.fetchall()
            
            print("   - Top 5 khoa c√≥ nhi·ªÅu s√°ch nh·∫•t:")
            for dept, count in departments:
                print(f"     ‚Ä¢ {dept}: {count} s√°ch")
            
            # Hi·ªÉn th·ªã 3 s√°ch m·∫´u
            cursor.execute('SELECT title, author, publication_year FROM books LIMIT 3')
            sample_books = cursor.fetchall()
            
            print(f"\nüìö M·∫´u s√°ch trong database:")
            for i, (title, author, year) in enumerate(sample_books, 1):
                print(f"   {i}. {title}")
                print(f"      T√°c gi·∫£: {author}")
                print(f"      NƒÉm: {year}")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói khi hi·ªÉn th·ªã th·ªëng k√™: {str(e)}")

def main():
    """H√†m main ƒë·ªÉ ch·∫°y chuy·ªÉn ƒë·ªïi"""
    print("=== CHUY·ªÇN ƒê·ªîI D·ªÆ LI·ªÜU T·ª™ CSV SANG DATABASE ===\n")
    
    # T·∫°o ƒë·ªëi t∆∞·ª£ng converter
    converter = CSVToDatabase("duytan_books.db")
    
    # T√¨m file CSV
    csv_files = []
    possible_files = [
        "duytan_books.csv",
        "random_36_books.csv", 
        "books_data.csv"
    ]
    
    for file in possible_files:
        if os.path.exists(file):
            csv_files.append(file)
    
    if not csv_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file CSV n√†o!")
        print("üìù C√°c file CSV ƒë∆∞·ª£c h·ªó tr·ª£:")
        for file in possible_files:
            print(f"   - {file}")
        return
    
    print("üìã T√¨m th·∫•y c√°c file CSV:")
    for i, file in enumerate(csv_files, 1):
        size = os.path.getsize(file) / 1024  # KB
        print(f"   {i}. {file} ({size:.1f} KB)")
    
    # N·∫øu c√≥ nhi·ªÅu file, cho user ch·ªçn
    if len(csv_files) > 1:
        try:
            choice = int(input(f"\nCh·ªçn file CSV (1-{len(csv_files)}): ")) - 1
            if 0 <= choice < len(csv_files):
                selected_file = csv_files[choice]
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                return
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            return
    else:
        selected_file = csv_files[0]
    
    print(f"\nüöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi file: {selected_file}")
    
    # Th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi
    success = converter.csv_to_db(selected_file)
    
    if success:
        # Hi·ªÉn th·ªã th·ªëng k√™
        converter.show_db_stats()
    else:
        print("‚ùå Chuy·ªÉn ƒë·ªïi th·∫•t b·∫°i!")

if __name__ == "__main__":
    main()
